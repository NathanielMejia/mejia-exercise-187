/*
Author: Nathaniel Mejia
Course:	CPT 187
Purpose: Asks for the customer's information, then, Provides the the ability to purchase products from a list, with a bonus prize awarded at the end.
Start Date: 12/4/2021 
 */


package edu.cpt187.mejia.project6;

//Import Scanner
import java.util.Scanner;

// Start MainClass
public class MainClass 
{

	// Initiate Constants
	public static final char[] MENU_CHARS = {'A','B','Q'};
	public static final String[] MENU_OPTIONS = {"Login","Create an Account","Quit"};
	public static final char[] FILE_MENU_CHARS = {'A','B','R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory","Create Order","Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A','B','C','D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	// START
	public static void main(String[] args) 
	{
		// Call Inventory Class
		Inventory currentInventory = new Inventory();
		// Call Order Class
		Order currentOrder = new Order();
		// Call Write Order
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		//Call UserAccounts
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//Declare and initialize the Scanner
		Scanner input = new Scanner (System.in);

		//initialize local variables
		String userName = "";
		char menuSelection = ' ';

		// Display Welcome Banner
		displayWelcomeBanner();

		// Bring up main menu
		menuSelection = validateMenuSelection(input);

		while(menuSelection != 'Q') // While menuSelection does NOT equal 'Q' =========================
		{
			// Set Account Arrays
			currentUser.setUserAccountArrays();
			
			// Set User Name
			userName = getUserName(input);

			if(menuSelection != 'A') // if menuSelection does NOT equal 'A' -------------------
			{
				currentUser.setSearchedIndex(userName);

				if(currentUser.getSearchedIndex() >= 0) // If getSearchedIndex is more than or equal to 0 --------------
				{
					//Display Account Results
					displayAccountResults(userName);
				} // END OF if currentUser.getSearchedIndex() >= 0
				else // ELSE
				{
					// Write single record onto the Accounts file
					currentUser.setWriteOneRecord(userName, getPassword(input));
					
					//Display Account Results
					displayAccountResults();
				} // END OF ELSE if currentUser.getSearchedIndex() >= 0

			} // END OF if menuSelection != 'A'
			else // ELSE
			{

				currentUser.setSearchedIndex(userName, getPassword(input));

				if(currentUser.getSearchedIndex() < 0) // if getSearchedIndex is less than zero ---------------
				{
					// Error
					displayLoginError();
				} // END OF getSearchedIndex < 0
				else // else
				{
					menuSelection = validateFileSelection(input);

					while(menuSelection != 'R') // if menuSelection does NOT equal R ---------------
					{

						if(menuSelection == 'A') // if menuSelection equals 'A' ----------------
						{
							currentInventory.setLoadItems(getFileName(input));

							if(currentInventory.getRecordCount() <= 0) // if getRecordCount() is less than or equal to zero ---------------
							{
								// Error
								displayFileError();
							}
							else // Else
							{
								displayRecordReport(currentInventory.getRecordCount());
							} // End OF ELSE currentInventory.getRecordCount() <= 0
						} // END OF menuSelection == 'A'
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));

							if(currentInventory.getItemSearchIndex() < 0) // if getItemSearchIndex is less than zero --------------
							{
								// Display the 'displayNotFound' menu
								displayNotFound();
							} // END OF currentInventory.getItemSearchIndex() < 0
							else // ELSE
							{
								
								// Set up items and products
								
								currentOrder.setLastItemSelectedIndex
								(currentInventory.getItemSearchIndex());

								currentOrder.setItemID
								(currentInventory.getItemIDs());

								currentOrder.setItemPrice
								(currentInventory.getItemPrices());

								currentOrder.setItemName
								(currentInventory.getItemNames());

								currentOrder.setHowMany
								(validateHowMany(input));

								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany()) // if getInStockCount is less than getHowMany --------------
								{
									// Display out of stock warning
									displayOutOfStock();
								} // END OF currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany()
								else // ELSE
								{
									// Set Discount Information
									currentOrder.setDiscountType
									(validateDiscountMenu(input,
									currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));

									currentOrder.setDiscountName
									(currentInventory.getDiscountNames());

									currentOrder.setDiscountRate
									(currentInventory.getDiscountRates());
									
									// Decrease stock in load
									currentOrder.setDecreaseInStock
									(currentInventory);
									
									// Set prize name
									currentOrder.setPrizeName
									(currentInventory.getPrizeNames(),
											currentInventory.getRandomNumber());

									// Set the write order
									orders.setWriteOrder (currentOrder.getItemID(),
											currentOrder.getItemName(), currentOrder.getItemPrice(),
											currentOrder.getHowMany(), currentOrder.getTotalCost());

									if(currentOrder.getDiscountRate() > 0.0) // if getDiscountRate is more than zero -----------
									{
										//Display the large order report that contains discount information
										displayOrderReport(userName,
												currentOrder.getItemName(),
												currentOrder.getItemPrice(),
												currentOrder.getHowMany(),
												currentOrder.getDiscountName(),
												currentOrder.getDiscountRate(),
												currentOrder.getDiscountAmt(),
												currentOrder.getDiscountPrice(),
												currentOrder.getSubTotal(),
												currentOrder.getTaxRate(),
												currentOrder.getTaxAmt(),
												currentOrder.getTotalCost(),
												currentOrder.getPrizeName(),
												currentOrder.getInStockCount(
												currentInventory.getInStockCounts()));
									} // currentOrder.getDiscountRate() > 0.0
									else // ELSE
									{
										//Display the smaller order report that does NOT contain discount information
										displayOrderReport(userName,
												currentOrder.getItemName(),
												currentOrder.getItemPrice(),
												currentOrder.getHowMany(),
												currentOrder.getSubTotal(),
												currentOrder.getTaxRate(),
												currentOrder.getTaxAmt(),
												currentOrder.getTotalCost(),
												currentOrder.getPrizeName(),
												currentOrder.getInStockCount(
												currentInventory.getInStockCounts()));
									} // END OF ELSE currentOrder.getDiscountRate() > 0.0
								} // END OF  ELSE currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany()

							} // END OF ELSE currentInventory.getItemSearchIndex() < 0

						} // END OF menuSelection = 'A'
						
						// Validate File Menu (Aka: bring up the menu again to allow re-selection in order to have an option to escape the loop)
						menuSelection = validateFileSelection(input);

					} // END OF WHILE menuSelection != 'R'
				} // END OF ELSE getSearchedIndex < 0

			} // END OF ELSE if menuSelection != 'A'

			// Brings up main menu
			menuSelection = validateMenuSelection(input);

		} // END OF while menuSelection != 'Q'

		currentInventory.setLoadItems (orders.getFileName(),
				orders.getRecordCount());

		if(orders.getRecordCount() > 0) // if getRecordCount is more than zero ----------
		{
			// Display the final report
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(),
					currentInventory.getItemPrices(), currentInventory.getOrderQuantities(),
					currentInventory.getOrderTotals(), currentInventory.getRecordCount(),
					currentInventory.getGrandTotal());
		} // END OF orders.getRecordCount() > 0

		// Display the farewell message
		displayFarewellMessage();

		//Close Scanner
		input.close();

	} // END OF main

	// START OF THE VOIDS -----------------------------------------------------------------------------------------

	public static void displayWelcomeBanner() // displayWelcomeBanner
	{
		// PRINT THE WELCOME BANNER
		// Displays when first running the program
		System.out.println("Welcome to Buy-Our-Garbage, the best place to");
		System.out.println("buy a variety of products from our local");
		System.out.println("warehouses across South Carolina!");

	} // END OF displayWelcomeBanner

	public static void displayFarewellMessage() // displayFarewellMessage
	{
		// PRINT THE FAREWELL MESSAGE
		// Displays right before the termination of the program
		System.out.println("Thank you for using Buy-Our-Garbage!");
		System.out.println("We hope you have a pleasant day!");
	} // END OF displayFarewellMessage

	public static void displayInventoryLoaded() // displayInventoryLoaded
	{
		// PRINT THE LOADING REPORT!
		// Shows up when the 'Load Inventory' option is chosen and successful
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("INVENTORY LOADED REPORT");
		System.out.println("Inventory in-stock counts have been processed.");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	} // END OF displayInventoryLoaded

	public static void displayOutOfStock() // displayOutOfStock
	{
		// PRINT THE Out Of Stock Error.
		// Shows up when more than the current stock of a product is requested
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock.");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	} // END OF displayOutOfStock

	public static void displayFileError() // displayFileError
	{
		// PRINT THE ANNOUNCEMENT
		// Shows up when the program cannot find the file entered by the user
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	} // END OF displayFileError

	public static void displayNotFound() // displayNotFound
	{
		// PRINT THE ANNOUNCEMENT
		// Shows up when the user inputs a ID for a product that does not exist in the file inputed by the user.
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

	} // END OF displayNotFound

	public static void displayAccountResults()  // displayAccountResults
	{
		// PRINT THE ANNOUNCEMENT
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	} // END OF displayAccountResults

	public static void displayAccountResults(String borrowedUserName) // displayAccountResults OVERLOADED
	{
		// PRINT THE OVERLOADED ANNOUNCEMENT
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.printf("%-31s%-1s%-17s\n", "Account not created: username, ", borrowedUserName, ", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	} // END OF displayAccountResults

	public static void displayLoginError()  // displayLoginError
	{
		// PRINT THE ANNOUNCEMENT
		// Shows up when the user inputs a ID for a product that does not exist in the file inputed by the user.
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

	} // END OF displayLoginError

	public static void displayRecordReport(int borrowedRecordCount) //displayRecordReport
	{
		// PRINT THE ANNOUNCEMENT
		// Shows up when the user inputed file has been read, telling the user how many records exist.
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%-3d%-17s\n", borrowedRecordCount, "records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

	} // END OF displayRecordReport

	public static void displayMainMenu() // displayMainMenu
	{
		// Initialize local variable
		int localIndex = 0;

		// PRINT MAIN MENU
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU"); // TITLE

		// While localIndex is less than MENU_CHARS (Number of Menu Options) continue to add more menu options.
		while(localIndex < MENU_CHARS.length) 
		{ 
			// REPEAT THE MENU (until there are no more options available)
			System.out.printf("%-2s%-4s%-7s\n", MENU_CHARS[localIndex], "for ", MENU_OPTIONS[localIndex]);
			//increase the local variable to make this loop display correctly
			localIndex++;
		} // END OF While
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

	} // END OF displayMainMenu

	public static void displayFileMenu() // displayFileMenu
	{
		// Local Variable
		int localIndex = 0;

		// Discount Menu
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");

		// While localIndex is less than the number of borrowedDiscountNames (Number of Discount Options) continue to add more menu options.
		while(localIndex < FILE_MENU_CHARS.length)
		{ // REPEAT THE MENU (until there are no more options available)
			System.out.printf("%-3s%-4s%-14s\n",FILE_MENU_CHARS[localIndex],"for ", FILE_MENU_OPTIONS[localIndex]);
			// Increases number.
			localIndex++;
		} // END OF While
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	} // END OF displayDiscountMenu

	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates) // displayDiscountMenu
	{
		// Local Variable
		int localIndex = 0;

		// Discount Menu
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");

		// While localIndex is less than the number of borrowedDiscountNames (Number of Discount Options) continue to add more menu options.
		while(localIndex < borrowedDiscountNames.length)
		{ // REPEAT THE MENU (until there are no more options available)
			System.out.printf("%-3s%-4s%-14s%5.1f%2s\n",SUB_MENU_CHARS[localIndex],"for ",borrowedDiscountNames[localIndex],borrowedDiscountRates[localIndex] * 100,"%");
			// Increases number.
			localIndex++;
		} // END OF While
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	} // END OF displayDiscountMenu

	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices,
			int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal) {
		{
			// Initialize Local Variables
			int localIndex = 0;

			//PRINT FINAL REPORT
			System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
			System.out.println("FINAL REPORT");
			System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
			System.out.printf("%-4s%-27s%-12s%-8s%-6s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL"); 
			// While localIndex is less than the total menu options available, continue!
			while(localIndex < borrowedRecordCount) 
			{
				// Repeats line until no more options remain.
				System.out.printf("%-4s%-27s%-2s%-12.2f%-6d%-2s%-6.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]); 
				System.out.println(""); // Empty space
				localIndex++; // Increment by one
			}// END OF While
			System.out.printf("%-14s\n", "GRAND TOTAL"); 
			System.out.printf("%-3s%-11.2f\n", "$", borrowedGrandTotal); 
		}
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	} // END OF displayFinalReport

	// 8 parameters
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName,
			double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate,
			double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		// ORDER REPORT
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-28s%-5s\n", "Customer Name: ", borrowedUserName); 

		System.out.printf("\n%-28s%-5s", "Item Name: ", borrowedItemName); 
		System.out.printf("\n%-28s%1s%6.2f\n", "Item Price: ", "$", borrowedItemPrice);

		System.out.printf("\n%-25s%7d\n", "Quantity: ", borrowedHowMany);

		System.out.printf("\n%-28s%1s%6.2f", "Subtotal: ", "$", borrowedSubTotal);
		System.out.printf("\n%-30s%4.1f%3s", "Tax Rate: ", borrowedTaxRate * 100, "%");
		System.out.printf("\n%-28s%1s%6.2f\n", "Tax Amount: ", "$", borrowedTaxAmt);

		System.out.printf("\n%-28s%1s%6.2f\n", "Order Total:", "$", borrowedTotalCost);

		System.out.printf("\n%-28s%-5s\n", "Prize:", borrowedPrizeName);

		System.out.printf("\n%-19s%-2d%-14s\n", "Buy more now: Only ", borrowedInStockCount, "left in stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~\n");
	} // END OF displayOrderReport

	// 12 parameters OVERLOADED
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName,
			double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName,
			double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice,
			double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost,
			String borrowedPrizeName, int borrowedInStockCount)
	{
		// OVERLOADED ORDER REPORT
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-28s%-5s\n", "Customer Name: ", borrowedUserName); 

		System.out.printf("\n%-28s%-5s", "Item Name: ", borrowedItemName); 
		System.out.printf("\n%-28s%1s%6.2f\n", "Item Price: ", "$", borrowedItemPrice);

		System.out.printf("\n%-28s%-5s", "Discount Name: ", borrowedDiscountName);
		System.out.printf("\n%-30s%4.1f%3s", "Discount Rate: ", borrowedDiscountRate * 100, "%");
		System.out.printf("\n%-28s%1s%6.2f", "Discount Amount: ", "$", borrowedDiscountAmt);
		System.out.printf("\n%-28s%1s%6.2f\n", "Discount Price: ","$", borrowedDiscountPrice);

		System.out.printf("\n%-25s%7d\n", "Quantity: ", borrowedHowMany);

		System.out.printf("\n%-28s%1s%6.2f", "Subtotal: ", "$", borrowedSubTotal);
		System.out.printf("\n%-30s%4.1f%3s", "Tax Rate: ", borrowedTaxRate * 100, "%");
		System.out.printf("\n%-28s%1s%6.2f\n", "Tax Amount: ", "$", borrowedTaxAmt);

		System.out.printf("\n%-28s%1s%6.2f\n", "Order Total:", "$", borrowedTotalCost);

		System.out.printf("\n%-28s%-5s\n", "Prize:", borrowedPrizeName);

		System.out.printf("\n%-19s%-2d%-14s\n", "Buy more now: Only ", borrowedInStockCount, "left in stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~\n");
	} // END OF displayOrderReport


	// START OF THE VR's -------------------------------------------------------------------------------------------

	// Prompt the user for their name!
	public static String getUserName(Scanner borrowedInput) 
	{
		// Initialize Local Variable
		String localUserName = "";


		// PROMPT FOR THE FIRST NAME
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your username:");
		// Puts input on next line
		localUserName = borrowedInput.next();
		// returns

		return localUserName;

	} // END OF getUserName 

	// Prompt the user for their name!
	public static String getPassword(Scanner borrowedInput) 
	{
		// Initialize Local Variable
		String localPassword = "";

		// PROMPT FOR THE PASSWORD
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your password:");
		// Puts input on next line
		localPassword = borrowedInput.next();
		// returns
		return localPassword;
	} // END OF getUserName 


	public static String getFileName(Scanner borrowedInput) 
	{
		// Initialize Local Variable
		String localFileName = "";

		// PROMPT FOR THE FILE NAME
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the file name with extension (i.e. file.txt):");
		// Puts input on next line
		localFileName = borrowedInput.next();
		// returns
		return localFileName;
	} // END OF getUserName 

	// Show the main menu and validate which option in the main menu is chosen
	public static char validateMenuSelection(Scanner borrowedInput) 
	{
		// Initialize Local Variable
		char localSelection = ' ';

		// DISPLAY MAIN MENU
		displayMainMenu();

		// Bring Up User Input
		System.out.printf("Enter your selection here: ");
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		// while localSelection does not equal A or B or Q, continue
		while(localSelection != MENU_CHARS[0] && localSelection != MENU_CHARS[1] && localSelection != MENU_CHARS[2]) 
		{
			// ERROR MESSAGE
			System.out.println("\nERROR, please choose a valid selection\n");

			// DISPLAY MAIN MENU
			displayMainMenu();

			// Bring Up User Input
			System.out.printf("Enter your selection here: ");
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		} // END OF WHILE

		// Return value!
		return localSelection; 

	} // END OF validateMainMenu



	// Show the discount menu and validate the Discount Menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates) 
	{
		// Initialize Local Variable
		char localSelection = ' ';

		// DISPLAY DISCOUNT MENU
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);

		// Prompt User
		System.out.printf("Please make your selection here: ");
		// Turn input upper case
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//loops if local selections does not equal A, B, C, or D
		while(localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1] && localSelection != SUB_MENU_CHARS[2] && localSelection != SUB_MENU_CHARS[3]) 
		{
			// ERROR 
			System.out.print("\nERROR, please choose a valid selection.\n");

			// DISPLAY DISCOUNT MENU
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);

			// Prompt User
			System.out.printf("Please make your selection here: ");
			// Turn input upper case
			localSelection = borrowedInput.next().toUpperCase().charAt(0);

		} // END OF while localHowMany

		// Return the value to whomever called for the validation
		return localSelection;
	}

	// Show the discount menu and validate the Discount Menu
	public static char validateFileSelection(Scanner borrowedInput) 
	{
		// Initialize Local Variable
		char localSelection = ' ';

		// DISPLAY DISCOUNT MENU
		displayFileMenu();

		// Prompt User
		System.out.printf("Please make your selection here: ");
		// Turn input upper case
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//loops if local selections does not equal A, B, C, or D
		while(localSelection != FILE_MENU_CHARS[0] && localSelection != FILE_MENU_CHARS[1] && localSelection != FILE_MENU_CHARS[2]) 
		{
			// ERROR 
			System.out.print("\nERROR, please choose a valid selection.\n");

			// DISPLAY DISCOUNT MENU
			displayFileMenu();

			// Prompt User
			System.out.printf("Please make your selection here: ");
			// Turn input upper case
			localSelection = borrowedInput.next().toUpperCase().charAt(0);

		} // END OF while localHowMany

		// Return the value to whomever called for the validation
		return localSelection;

	} // END OF validateDiscountMenu

	// Ask how much of the product the user wants and validate the number chosen
	public static String validateHowMany(Scanner borrowedInput) 
	{
		// Initialize Local Variable
		String localHowMany = "";

		// ASK HOW MANY
		System.out.println("\nHow many would you like?");
		localHowMany = borrowedInput.next(); // Prompt
		
		while(Integer.parseInt(localHowMany) <= 0)
		{
			System.out.print("\nERROR, please choose a valid number.\n");
			
			System.out.println("\nHow many would you like?");
			localHowMany = borrowedInput.next(); // Prompt
		}
		// Return the string value!
		return localHowMany;
	}// END OF validateHowMany

	public static int validateSearchValue(Scanner borrowedInput) 
	{
		// Initialize Local Variable
		int localSearchValue = 0;

		// ASK FOR VALUE
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter the search value:");
		localSearchValue = borrowedInput.nextInt(); // Prompt
		// If localHowMany is less than or equal to zero, loop
		while(localSearchValue < 0) 
		{
			// ERROR 
			System.out.print("\nERROR, please choose a valid number.\n");
			// ASK HOW MANY
			System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("Enter the search value:");
			localSearchValue = borrowedInput.nextInt();
		} // END OF WHILE

		// Return the value!
		return localSearchValue;
	}// END OF validateSearchValue
	
} // END OF MainClass
